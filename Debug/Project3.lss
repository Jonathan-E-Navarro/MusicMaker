
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  0000084a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001019  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071a  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000712  00000000  00000000  000021f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042a  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000084f  00000000  00000000  00002f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003769  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 35       	cpi	r26, 0x5A	; 90
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa e5       	ldi	r26, 0x5A	; 90
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 35       	cpi	r26, 0x5A	; 90
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
  8a:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
  92:	66 23       	and	r22, r22
  94:	11 f0       	breq	.+4      	; 0x9a <output+0x8>
  96:	c0 9a       	sbi	0x18, 0	; 24
  98:	01 c0       	rjmp	.+2      	; 0x9c <output+0xa>
  9a:	c0 98       	cbi	0x18, 0	; 24
  9c:	c1 98       	cbi	0x18, 1	; 24
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	81 bb       	out	0x11, r24	; 17
  a4:	c2 9a       	sbi	0x18, 2	; 24
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	00 00       	nop
  ac:	c2 98       	cbi	0x18, 2	; 24
  ae:	08 95       	ret

000000b0 <write>:
  b0:	c0 98       	cbi	0x18, 0	; 24
  b2:	c1 9a       	sbi	0x18, 1	; 24
  b4:	11 ba       	out	0x11, r1	; 17
  b6:	90 b3       	in	r25, 0x10	; 16
  b8:	c2 9a       	sbi	0x18, 2	; 24
  ba:	00 00       	nop
  bc:	00 00       	nop
  be:	00 00       	nop
  c0:	11 ba       	out	0x11, r1	; 17
  c2:	90 b3       	in	r25, 0x10	; 16
  c4:	c2 98       	cbi	0x18, 2	; 24
  c6:	99 23       	and	r25, r25
  c8:	9c f3       	brlt	.-26     	; 0xb0 <write>
  ca:	0e 94 49 00 	call	0x92	; 0x92 <output>
  ce:	08 95       	ret

000000d0 <wait_avr>:
  d0:	9c 01       	movw	r18, r24
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	83 e8       	ldi	r24, 0x83	; 131
  d8:	08 c0       	rjmp	.+16     	; 0xea <wait_avr+0x1a>
  da:	82 bf       	out	0x32, r24	; 50
  dc:	98 b7       	in	r25, 0x38	; 56
  de:	91 60       	ori	r25, 0x01	; 1
  e0:	98 bf       	out	0x38, r25	; 56
  e2:	a8 95       	wdr
  e4:	08 b6       	in	r0, 0x38	; 56
  e6:	00 fe       	sbrs	r0, 0
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <wait_avr+0x14>
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	31 09       	sbc	r19, r1
  ee:	a8 f7       	brcc	.-22     	; 0xda <wait_avr+0xa>
  f0:	13 be       	out	0x33, r1	; 51
  f2:	08 95       	ret

000000f4 <wait_avr2>:
  f4:	9c 01       	movw	r18, r24
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	83 bf       	out	0x33, r24	; 51
  fa:	8e ec       	ldi	r24, 0xCE	; 206
  fc:	08 c0       	rjmp	.+16     	; 0x10e <wait_avr2+0x1a>
  fe:	82 bf       	out	0x32, r24	; 50
 100:	98 b7       	in	r25, 0x38	; 56
 102:	91 60       	ori	r25, 0x01	; 1
 104:	98 bf       	out	0x38, r25	; 56
 106:	a8 95       	wdr
 108:	08 b6       	in	r0, 0x38	; 56
 10a:	00 fe       	sbrs	r0, 0
 10c:	fd cf       	rjmp	.-6      	; 0x108 <wait_avr2+0x14>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
 112:	a8 f7       	brcc	.-22     	; 0xfe <wait_avr2+0xa>
 114:	13 be       	out	0x33, r1	; 51
 116:	08 95       	ret

00000118 <ini_lcd>:
 118:	b8 9a       	sbi	0x17, 0	; 23
 11a:	b9 9a       	sbi	0x17, 1	; 23
 11c:	ba 9a       	sbi	0x17, 2	; 23
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_avr>
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 e3       	ldi	r24, 0x30	; 48
 12a:	0e 94 49 00 	call	0x92	; 0x92 <output>
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_avr>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	0e 94 49 00 	call	0x92	; 0x92 <output>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_avr>
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	8c e3       	ldi	r24, 0x3C	; 60
 14a:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 166:	08 95       	ret

00000168 <clr_lcd>:
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 170:	08 95       	ret

00000172 <pos_lcd>:
 172:	cf 93       	push	r28
 174:	c6 2f       	mov	r28, r22
 176:	98 e2       	ldi	r25, 0x28	; 40
 178:	89 9f       	mul	r24, r25
 17a:	c0 0d       	add	r28, r0
 17c:	11 24       	eor	r1, r1
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 186:	cc 23       	and	r28, r28
 188:	31 f0       	breq	.+12     	; 0x196 <pos_lcd+0x24>
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	84 e1       	ldi	r24, 0x14	; 20
 18e:	0e 94 58 00 	call	0xb0	; 0xb0 <write>
 192:	c1 50       	subi	r28, 0x01	; 1
 194:	d1 f7       	brne	.-12     	; 0x18a <pos_lcd+0x18>
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <puts_lcd2>:

void
puts_lcd2(const char *s)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
 19e:	ec 01       	movw	r28, r24
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	88 23       	and	r24, r24
 1a8:	31 f0       	breq	.+12     	; 0x1b6 <puts_lcd2+0x1c>
		write(c, 1);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	0e 94 58 00 	call	0xb0	; 0xb0 <write>

void
puts_lcd2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
 1b0:	89 91       	ld	r24, Y+
 1b2:	81 11       	cpse	r24, r1
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <puts_lcd2+0x10>
		write(c, 1);
	}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <play_note>:

struct note Song [16] = {{B4,W},{D5,W},{D5,H},{E5,H},{E5,W},{Rest,S},{G5,Q},{FS5,Q},{G5,Q},{FS5,Q},{G5,Q},{FS5,Q},{D5,H},{D5,H},{E5,H},{E5,W}};
struct note Song2 [16] = {{C5,H},{G5,H},{F5,Q},{E5,Q},{D5,Q},{C6,H},{G5,H},{F5,Q},{E5,Q},{D5,Q},{C6,H},{G5,H},{F5,Q},{E5,Q},{F5,Q},{D5,Q}};

char temp[40];
void play_note(double freq, double dur){
 1bc:	8f 92       	push	r8
 1be:	9f 92       	push	r9
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	6b 01       	movw	r12, r22
 1d6:	7c 01       	movw	r14, r24
 1d8:	49 01       	movw	r8, r18
 1da:	5a 01       	movw	r10, r20
	float period = (1/freq);
	int TH = period/2*20000; 
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	9f e3       	ldi	r25, 0x3F	; 63
 1e8:	0e 94 bd 02 	call	0x57a	; 0x57a <__divsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	5f e3       	ldi	r21, 0x3F	; 63
 1f4:	0e 94 b6 03 	call	0x76c	; 0x76c <__mulsf3>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e4       	ldi	r19, 0x40	; 64
 1fc:	4c e9       	ldi	r20, 0x9C	; 156
 1fe:	56 e4       	ldi	r21, 0x46	; 70
 200:	0e 94 b6 03 	call	0x76c	; 0x76c <__mulsf3>
 204:	0e 94 2f 03 	call	0x65e	; 0x65e <__fixsfsi>
 208:	8b 01       	movw	r16, r22
	int K = dur*freq;
 20a:	a5 01       	movw	r20, r10
 20c:	94 01       	movw	r18, r8
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	0e 94 b6 03 	call	0x76c	; 0x76c <__mulsf3>
 216:	0e 94 2f 03 	call	0x65e	; 0x65e <__fixsfsi>
 21a:	7b 01       	movw	r14, r22
	for(int i =0;i < K;i++){
 21c:	16 16       	cp	r1, r22
 21e:	17 06       	cpc	r1, r23
 220:	74 f4       	brge	.+28     	; 0x23e <play_note+0x82>
 222:	c0 e0       	ldi	r28, 0x00	; 0
 224:	d0 e0       	ldi	r29, 0x00	; 0
		 SET_BIT(PORTB,PINB3);
 226:	c3 9a       	sbi	0x18, 3	; 24
		 wait_avr2(TH);
 228:	c8 01       	movw	r24, r16
 22a:	0e 94 7a 00 	call	0xf4	; 0xf4 <wait_avr2>
		 CLR_BIT(PORTB,PINB3);
 22e:	c3 98       	cbi	0x18, 3	; 24
		 wait_avr2(TH);
 230:	c8 01       	movw	r24, r16
 232:	0e 94 7a 00 	call	0xf4	; 0xf4 <wait_avr2>
char temp[40];
void play_note(double freq, double dur){
	float period = (1/freq);
	int TH = period/2*20000; 
	int K = dur*freq;
	for(int i =0;i < K;i++){
 236:	21 96       	adiw	r28, 0x01	; 1
 238:	ec 16       	cp	r14, r28
 23a:	fd 06       	cpc	r15, r29
 23c:	a1 f7       	brne	.-24     	; 0x226 <play_note+0x6a>
		 SET_BIT(PORTB,PINB3);
		 wait_avr2(TH);
		 CLR_BIT(PORTB,PINB3);
		 wait_avr2(TH);
	}
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	bf 90       	pop	r11
 250:	af 90       	pop	r10
 252:	9f 90       	pop	r9
 254:	8f 90       	pop	r8
 256:	08 95       	ret

00000258 <play_music>:

void play_music(struct note song[],int N){
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	for (int i =0; i < N;i++)
 260:	16 16       	cp	r1, r22
 262:	17 06       	cpc	r1, r23
 264:	24 f5       	brge	.+72     	; 0x2ae <play_music+0x56>
 266:	8c 01       	movw	r16, r24
 268:	ec 01       	movw	r28, r24
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	06 0f       	add	r16, r22
 270:	17 1f       	adc	r17, r23
	{
		play_note(note_array[song[i].frequency],dur_array[song[i].duration]);
 272:	e9 81       	ldd	r30, Y+1	; 0x01
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e0 56       	subi	r30, 0x60	; 96
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	20 81       	ld	r18, Z
 284:	31 81       	ldd	r19, Z+1	; 0x01
 286:	42 81       	ldd	r20, Z+2	; 0x02
 288:	53 81       	ldd	r21, Z+3	; 0x03
 28a:	e8 81       	ld	r30, Y
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	ec 54       	subi	r30, 0x4C	; 76
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	60 81       	ld	r22, Z
 29c:	71 81       	ldd	r23, Z+1	; 0x01
 29e:	82 81       	ldd	r24, Z+2	; 0x02
 2a0:	93 81       	ldd	r25, Z+3	; 0x03
 2a2:	0e 94 de 00 	call	0x1bc	; 0x1bc <play_note>
 2a6:	22 96       	adiw	r28, 0x02	; 2
		 wait_avr2(TH);
	}
}

void play_music(struct note song[],int N){
	for (int i =0; i < N;i++)
 2a8:	c0 17       	cp	r28, r16
 2aa:	d1 07       	cpc	r29, r17
 2ac:	11 f7       	brne	.-60     	; 0x272 <play_music+0x1a>
	{
		play_note(note_array[song[i].frequency],dur_array[song[i].duration]);
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <is_pressed>:


int is_pressed(int r, int c)
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
	// DDRC = 0x00; //configuration of C input

	for(int i = 0; i <8; i++){
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
		CLR_BIT(DDRC,i);
 2c0:	a1 e0       	ldi	r26, 0x01	; 1
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	44 b3       	in	r20, 0x14	; 20
 2c6:	fd 01       	movw	r30, r26
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <is_pressed+0x18>
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <is_pressed+0x14>
 2d4:	9e 2f       	mov	r25, r30
 2d6:	90 95       	com	r25
 2d8:	94 23       	and	r25, r20
 2da:	94 bb       	out	0x14, r25	; 20

int is_pressed(int r, int c)
{
	// DDRC = 0x00; //configuration of C input

	for(int i = 0; i <8; i++){
 2dc:	2f 5f       	subi	r18, 0xFF	; 255
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	28 30       	cpi	r18, 0x08	; 8
 2e2:	31 05       	cpc	r19, r1
 2e4:	79 f7       	brne	.-34     	; 0x2c4 <is_pressed+0xc>
		CLR_BIT(DDRC,i);
	}

	//sets the column to be pulled as output
	SET_BIT(DDRC,r);
 2e6:	44 b3       	in	r20, 0x14	; 20
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <is_pressed+0x3c>
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	8a 95       	dec	r24
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <is_pressed+0x38>
 2f8:	cf 01       	movw	r24, r30
 2fa:	84 2b       	or	r24, r20
 2fc:	84 bb       	out	0x14, r24	; 20

	//set z
	CLR_BIT(PORTC,PINC0);
 2fe:	a8 98       	cbi	0x15, 0	; 21
	CLR_BIT(PORTC,PINC1);
 300:	a9 98       	cbi	0x15, 1	; 21
	CLR_BIT(PORTC,PINC2);
 302:	aa 98       	cbi	0x15, 2	; 21
	CLR_BIT(PORTC,PINC3);
 304:	ab 98       	cbi	0x15, 3	; 21
	//set last four pins to z
	CLR_BIT(PORTC,PINC4);
 306:	ac 98       	cbi	0x15, 4	; 21
	CLR_BIT(PORTC,PINC5);
 308:	ad 98       	cbi	0x15, 5	; 21
	CLR_BIT(PORTC,PINC6);
 30a:	ae 98       	cbi	0x15, 6	; 21
	CLR_BIT(PORTC,PINC7);
 30c:	af 98       	cbi	0x15, 7	; 21

	SET_BIT(PORTC,c+4);
 30e:	85 b3       	in	r24, 0x15	; 21
 310:	eb 01       	movw	r28, r22
 312:	24 96       	adiw	r28, 0x04	; 4
 314:	0c 2e       	mov	r0, r28
 316:	02 c0       	rjmp	.+4      	; 0x31c <is_pressed+0x64>
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <is_pressed+0x60>
 320:	28 2b       	or	r18, r24
 322:	25 bb       	out	0x15, r18	; 21

	wait_avr(1);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_avr>
	//check if button is pressed
	if(!GET_BIT(PINC, c+4)){
 32c:	23 b3       	in	r18, 0x13	; 19
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <is_pressed+0x7e>
 332:	35 95       	asr	r19
 334:	27 95       	ror	r18
 336:	ca 95       	dec	r28
 338:	e2 f7       	brpl	.-8      	; 0x332 <is_pressed+0x7a>
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	20 ff       	sbrs	r18, 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <is_pressed+0x8e>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
		return 1;                    //button is pressed
	}

	return 0;
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <get_key>:
int get_key(void){
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
	for(int r = 0; r < 4; r++)
 354:	00 e0       	ldi	r16, 0x00	; 0
 356:	10 e0       	ldi	r17, 0x00	; 0
 358:	18 c0       	rjmp	.+48     	; 0x38a <get_key+0x3e>
	{
		for(int c = 0; c < 4; c++)
		{
			if(is_pressed(r,c))
 35a:	be 01       	movw	r22, r28
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <is_pressed>
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	49 f0       	breq	.+18     	; 0x378 <get_key+0x2c>
			{
				return r*4+c+1;
 366:	00 0f       	add	r16, r16
 368:	11 1f       	adc	r17, r17
 36a:	00 0f       	add	r16, r16
 36c:	11 1f       	adc	r17, r17
 36e:	c0 0f       	add	r28, r16
 370:	d1 1f       	adc	r29, r17
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0c c0       	rjmp	.+24     	; 0x390 <get_key+0x44>
	return 0;
}
int get_key(void){
	for(int r = 0; r < 4; r++)
	{
		for(int c = 0; c < 4; c++)
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	c4 30       	cpi	r28, 0x04	; 4
 37c:	d1 05       	cpc	r29, r1
 37e:	69 f7       	brne	.-38     	; 0x35a <get_key+0xe>
	}

	return 0;
}
int get_key(void){
	for(int r = 0; r < 4; r++)
 380:	0f 5f       	subi	r16, 0xFF	; 255
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	04 30       	cpi	r16, 0x04	; 4
 386:	11 05       	cpc	r17, r1
 388:	19 f0       	breq	.+6      	; 0x390 <get_key+0x44>
		return 1;                    //button is pressed
	}

	return 0;
}
int get_key(void){
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	e5 cf       	rjmp	.-54     	; 0x35a <get_key+0xe>
				return r*4+c+1;
			}
		}
	}
	return 0;
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <poll_button>:
void poll_button(int *pause,int *play1, int *play2){
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	ec 01       	movw	r28, r24
 3a8:	7b 01       	movw	r14, r22
 3aa:	8a 01       	movw	r16, r20
	int key = get_key();
 3ac:	0e 94 a6 01 	call	0x34c	; 0x34c <get_key>
	char buf[50];
	if(key == 1)
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	91 05       	cpc	r25, r1
 3b4:	c1 f5       	brne	.+112    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		//pos_lcd(0,5);
		//put_lcd('0'+key);
		wait_avr(500);
 3b6:	84 ef       	ldi	r24, 0xF4	; 244
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_avr>
		if(*pause == 1){
 3be:	88 81       	ld	r24, Y
 3c0:	99 81       	ldd	r25, Y+1	; 0x01
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	91 05       	cpc	r25, r1
 3c6:	e9 f4       	brne	.+58     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		    *pause = 0;
 3c8:	19 82       	std	Y+1, r1	; 0x01
 3ca:	18 82       	st	Y, r1
			clr_lcd();
 3cc:	0e 94 b4 00 	call	0x168	; 0x168 <clr_lcd>
			pos_lcd(0,0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 b9 00 	call	0x172	; 0x172 <pos_lcd>
			puts_lcd2("playing!");
 3d8:	8c e1       	ldi	r24, 0x1C	; 28
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>
			pos_lcd(1,0);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 b9 00 	call	0x172	; 0x172 <pos_lcd>
			puts_lcd2("Song: Iron Man");
 3e8:	85 e2       	ldi	r24, 0x25	; 37
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>
			*play1 = 1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	f7 01       	movw	r30, r14
 3f6:	91 83       	std	Z+1, r25	; 0x01
 3f8:	80 83       	st	Z, r24
			*play2 = 0;
 3fa:	f8 01       	movw	r30, r16
 3fc:	11 82       	std	Z+1, r1	; 0x01
 3fe:	10 82       	st	Z, r1
 400:	4a c0       	rjmp	.+148    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		}
	    else if(*pause == 0){
 402:	89 2b       	or	r24, r25
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	47 c0       	rjmp	.+142    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		    *pause = 1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	99 83       	std	Y+1, r25	; 0x01
 40e:	88 83       	st	Y, r24
			clr_lcd();
 410:	0e 94 b4 00 	call	0x168	; 0x168 <clr_lcd>
			pos_lcd(0,0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 b9 00 	call	0x172	; 0x172 <pos_lcd>
			puts_lcd2("Paused");
 41c:	84 e3       	ldi	r24, 0x34	; 52
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>
 424:	38 c0       	rjmp	.+112    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		}	
	}
	if(key == 2)
 426:	02 97       	sbiw	r24, 0x02	; 2
 428:	b1 f5       	brne	.+108    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	{
		//pos_lcd(0,5);
		//put_lcd('0'+key);
		wait_avr(500);
 42a:	84 ef       	ldi	r24, 0xF4	; 244
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_avr>
		if(*pause == 1){
 432:	88 81       	ld	r24, Y
 434:	99 81       	ldd	r25, Y+1	; 0x01
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	91 05       	cpc	r25, r1
 43a:	e9 f4       	brne	.+58     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			*pause = 0;
 43c:	19 82       	std	Y+1, r1	; 0x01
 43e:	18 82       	st	Y, r1
			clr_lcd();
 440:	0e 94 b4 00 	call	0x168	; 0x168 <clr_lcd>
			pos_lcd(0,0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 b9 00 	call	0x172	; 0x172 <pos_lcd>
			puts_lcd2("playing!");
 44c:	8c e1       	ldi	r24, 0x1C	; 28
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>
			pos_lcd(1,0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 b9 00 	call	0x172	; 0x172 <pos_lcd>
			puts_lcd2("Song: Star Wars");
 45c:	8b e3       	ldi	r24, 0x3B	; 59
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>
			*play1 = 0;
 464:	f7 01       	movw	r30, r14
 466:	11 82       	std	Z+1, r1	; 0x01
 468:	10 82       	st	Z, r1
			*play2 = 1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	f8 01       	movw	r30, r16
 470:	91 83       	std	Z+1, r25	; 0x01
 472:	80 83       	st	Z, r24
 474:	10 c0       	rjmp	.+32     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		}
		else if(*pause == 0){
 476:	89 2b       	or	r24, r25
 478:	71 f4       	brne	.+28     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
			*pause = 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	99 83       	std	Y+1, r25	; 0x01
 480:	88 83       	st	Y, r24
			clr_lcd();
 482:	0e 94 b4 00 	call	0x168	; 0x168 <clr_lcd>
			pos_lcd(0,0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 b9 00 	call	0x172	; 0x172 <pos_lcd>
			puts_lcd2("Paused");
 48e:	84 e3       	ldi	r24, 0x34	; 52
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>
		}
	}
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	08 95       	ret

000004a4 <main>:

int main(void)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <main+0x6>
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x8>
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <main+0xa>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	//set port A to be output
	DDRA = 0x01;   
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x08;
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	87 bb       	out	0x17, r24	; 23

	//initialize our LCD
	ini_lcd();
 4ba:	0e 94 8c 00 	call	0x118	; 0x118 <ini_lcd>
	//character buffer for writing to our LCD
	char buf[50];

	//place holder format
	puts_lcd2("Press to play:");
 4be:	8b e4       	ldi	r24, 0x4B	; 75
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 cd 00 	call	0x19a	; 0x19a <puts_lcd2>

	int pause = 1;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	9a 83       	std	Y+2, r25	; 0x02
 4cc:	89 83       	std	Y+1, r24	; 0x01
	int play1 = 0;
 4ce:	1c 82       	std	Y+4, r1	; 0x04
 4d0:	1b 82       	std	Y+3, r1	; 0x03
	int play2 = 0;
 4d2:	1e 82       	std	Y+6, r1	; 0x06
 4d4:	1d 82       	std	Y+5, r1	; 0x05
 4d6:	0a c0       	rjmp	.+20     	; 0x4ec <main+0x48>
	while(1){
	while(pause){
		poll_button(&pause,&play1,&play2);
 4d8:	ae 01       	movw	r20, r28
 4da:	4b 5f       	subi	r20, 0xFB	; 251
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	be 01       	movw	r22, r28
 4e0:	6d 5f       	subi	r22, 0xFD	; 253
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	0e 94 cd 01 	call	0x39a	; 0x39a <poll_button>

	int pause = 1;
	int play1 = 0;
	int play2 = 0;
	while(1){
	while(pause){
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	89 2b       	or	r24, r25
 4f2:	91 f7       	brne	.-28     	; 0x4d8 <main+0x34>
		poll_button(&pause,&play1,&play2);
	}

    while(!pause) 
    {
	 if(play1){
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	9c 81       	ldd	r25, Y+4	; 0x04
 4f8:	89 2b       	or	r24, r25
 4fa:	d9 f0       	breq	.+54     	; 0x532 <main+0x8e>
	     poll_button(&pause,&play1,&play2);
 4fc:	ae 01       	movw	r20, r28
 4fe:	4b 5f       	subi	r20, 0xFB	; 251
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	be 01       	movw	r22, r28
 504:	6d 5f       	subi	r22, 0xFD	; 253
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	0e 94 cd 01 	call	0x39a	; 0x39a <poll_button>
	     play_music(Song,16);
 510:	60 e1       	ldi	r22, 0x10	; 16
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 2c 01 	call	0x258	; 0x258 <play_music>
	     poll_button(&pause,&play1,&play2);
 51c:	ae 01       	movw	r20, r28
 51e:	4b 5f       	subi	r20, 0xFB	; 251
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	be 01       	movw	r22, r28
 524:	6d 5f       	subi	r22, 0xFD	; 253
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	0e 94 cd 01 	call	0x39a	; 0x39a <poll_button>
 530:	1e c0       	rjmp	.+60     	; 0x56e <main+0xca>
	 }	
	 else if(play2){
 532:	8d 81       	ldd	r24, Y+5	; 0x05
 534:	9e 81       	ldd	r25, Y+6	; 0x06
 536:	89 2b       	or	r24, r25
 538:	d1 f0       	breq	.+52     	; 0x56e <main+0xca>
		 poll_button(&pause,&play1,&play2);
 53a:	ae 01       	movw	r20, r28
 53c:	4b 5f       	subi	r20, 0xFB	; 251
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	be 01       	movw	r22, r28
 542:	6d 5f       	subi	r22, 0xFD	; 253
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	0e 94 cd 01 	call	0x39a	; 0x39a <poll_button>
		 play_music(Song2,16);
 54e:	60 e1       	ldi	r22, 0x10	; 16
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 e6       	ldi	r24, 0x60	; 96
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 2c 01 	call	0x258	; 0x258 <play_music>
		 poll_button(&pause,&play1,&play2);
 55a:	ae 01       	movw	r20, r28
 55c:	4b 5f       	subi	r20, 0xFB	; 251
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	be 01       	movw	r22, r28
 562:	6d 5f       	subi	r22, 0xFD	; 253
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	0e 94 cd 01 	call	0x39a	; 0x39a <poll_button>
	while(1){
	while(pause){
		poll_button(&pause,&play1,&play2);
	}

    while(!pause) 
 56e:	89 81       	ldd	r24, Y+1	; 0x01
 570:	9a 81       	ldd	r25, Y+2	; 0x02
 572:	89 2b       	or	r24, r25
 574:	09 f4       	brne	.+2      	; 0x578 <main+0xd4>
 576:	be cf       	rjmp	.-132    	; 0x4f4 <main+0x50>
 578:	b9 cf       	rjmp	.-142    	; 0x4ec <main+0x48>

0000057a <__divsf3>:
 57a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__divsf3x>
 57e:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__fp_round>
 582:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_pscB>
 586:	58 f0       	brcs	.+22     	; 0x59e <__divsf3+0x24>
 588:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_pscA>
 58c:	40 f0       	brcs	.+16     	; 0x59e <__divsf3+0x24>
 58e:	29 f4       	brne	.+10     	; 0x59a <__divsf3+0x20>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	29 f0       	breq	.+10     	; 0x59e <__divsf3+0x24>
 594:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_inf>
 598:	51 11       	cpse	r21, r1
 59a:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_szero>
 59e:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_nan>

000005a2 <__divsf3x>:
 5a2:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_split3>
 5a6:	68 f3       	brcs	.-38     	; 0x582 <__divsf3+0x8>

000005a8 <__divsf3_pse>:
 5a8:	99 23       	and	r25, r25
 5aa:	b1 f3       	breq	.-20     	; 0x598 <__divsf3+0x1e>
 5ac:	55 23       	and	r21, r21
 5ae:	91 f3       	breq	.-28     	; 0x594 <__divsf3+0x1a>
 5b0:	95 1b       	sub	r25, r21
 5b2:	55 0b       	sbc	r21, r21
 5b4:	bb 27       	eor	r27, r27
 5b6:	aa 27       	eor	r26, r26
 5b8:	62 17       	cp	r22, r18
 5ba:	73 07       	cpc	r23, r19
 5bc:	84 07       	cpc	r24, r20
 5be:	38 f0       	brcs	.+14     	; 0x5ce <__divsf3_pse+0x26>
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	5f 4f       	sbci	r21, 0xFF	; 255
 5c4:	22 0f       	add	r18, r18
 5c6:	33 1f       	adc	r19, r19
 5c8:	44 1f       	adc	r20, r20
 5ca:	aa 1f       	adc	r26, r26
 5cc:	a9 f3       	breq	.-22     	; 0x5b8 <__divsf3_pse+0x10>
 5ce:	35 d0       	rcall	.+106    	; 0x63a <__divsf3_pse+0x92>
 5d0:	0e 2e       	mov	r0, r30
 5d2:	3a f0       	brmi	.+14     	; 0x5e2 <__divsf3_pse+0x3a>
 5d4:	e0 e8       	ldi	r30, 0x80	; 128
 5d6:	32 d0       	rcall	.+100    	; 0x63c <__divsf3_pse+0x94>
 5d8:	91 50       	subi	r25, 0x01	; 1
 5da:	50 40       	sbci	r21, 0x00	; 0
 5dc:	e6 95       	lsr	r30
 5de:	00 1c       	adc	r0, r0
 5e0:	ca f7       	brpl	.-14     	; 0x5d4 <__divsf3_pse+0x2c>
 5e2:	2b d0       	rcall	.+86     	; 0x63a <__divsf3_pse+0x92>
 5e4:	fe 2f       	mov	r31, r30
 5e6:	29 d0       	rcall	.+82     	; 0x63a <__divsf3_pse+0x92>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	88 1f       	adc	r24, r24
 5ee:	bb 1f       	adc	r27, r27
 5f0:	26 17       	cp	r18, r22
 5f2:	37 07       	cpc	r19, r23
 5f4:	48 07       	cpc	r20, r24
 5f6:	ab 07       	cpc	r26, r27
 5f8:	b0 e8       	ldi	r27, 0x80	; 128
 5fa:	09 f0       	breq	.+2      	; 0x5fe <__divsf3_pse+0x56>
 5fc:	bb 0b       	sbc	r27, r27
 5fe:	80 2d       	mov	r24, r0
 600:	bf 01       	movw	r22, r30
 602:	ff 27       	eor	r31, r31
 604:	93 58       	subi	r25, 0x83	; 131
 606:	5f 4f       	sbci	r21, 0xFF	; 255
 608:	3a f0       	brmi	.+14     	; 0x618 <__divsf3_pse+0x70>
 60a:	9e 3f       	cpi	r25, 0xFE	; 254
 60c:	51 05       	cpc	r21, r1
 60e:	78 f0       	brcs	.+30     	; 0x62e <__divsf3_pse+0x86>
 610:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_inf>
 614:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_szero>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	e4 f3       	brlt	.-8      	; 0x614 <__divsf3_pse+0x6c>
 61c:	98 3e       	cpi	r25, 0xE8	; 232
 61e:	d4 f3       	brlt	.-12     	; 0x614 <__divsf3_pse+0x6c>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c9 f7       	brne	.-14     	; 0x620 <__divsf3_pse+0x78>
 62e:	88 0f       	add	r24, r24
 630:	91 1d       	adc	r25, r1
 632:	96 95       	lsr	r25
 634:	87 95       	ror	r24
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret
 63a:	e1 e0       	ldi	r30, 0x01	; 1
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	bb 1f       	adc	r27, r27
 644:	62 17       	cp	r22, r18
 646:	73 07       	cpc	r23, r19
 648:	84 07       	cpc	r24, r20
 64a:	ba 07       	cpc	r27, r26
 64c:	20 f0       	brcs	.+8      	; 0x656 <__divsf3_pse+0xae>
 64e:	62 1b       	sub	r22, r18
 650:	73 0b       	sbc	r23, r19
 652:	84 0b       	sbc	r24, r20
 654:	ba 0b       	sbc	r27, r26
 656:	ee 1f       	adc	r30, r30
 658:	88 f7       	brcc	.-30     	; 0x63c <__divsf3_pse+0x94>
 65a:	e0 95       	com	r30
 65c:	08 95       	ret

0000065e <__fixsfsi>:
 65e:	0e 94 36 03 	call	0x66c	; 0x66c <__fixunssfsi>
 662:	68 94       	set
 664:	b1 11       	cpse	r27, r1
 666:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_szero>
 66a:	08 95       	ret

0000066c <__fixunssfsi>:
 66c:	0e 94 95 03 	call	0x72a	; 0x72a <__fp_splitA>
 670:	88 f0       	brcs	.+34     	; 0x694 <__fixunssfsi+0x28>
 672:	9f 57       	subi	r25, 0x7F	; 127
 674:	98 f0       	brcs	.+38     	; 0x69c <__fixunssfsi+0x30>
 676:	b9 2f       	mov	r27, r25
 678:	99 27       	eor	r25, r25
 67a:	b7 51       	subi	r27, 0x17	; 23
 67c:	b0 f0       	brcs	.+44     	; 0x6aa <__fixunssfsi+0x3e>
 67e:	e1 f0       	breq	.+56     	; 0x6b8 <__fixunssfsi+0x4c>
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	1a f0       	brmi	.+6      	; 0x690 <__fixunssfsi+0x24>
 68a:	ba 95       	dec	r27
 68c:	c9 f7       	brne	.-14     	; 0x680 <__fixunssfsi+0x14>
 68e:	14 c0       	rjmp	.+40     	; 0x6b8 <__fixunssfsi+0x4c>
 690:	b1 30       	cpi	r27, 0x01	; 1
 692:	91 f0       	breq	.+36     	; 0x6b8 <__fixunssfsi+0x4c>
 694:	0e 94 af 03 	call	0x75e	; 0x75e <__fp_zero>
 698:	b1 e0       	ldi	r27, 0x01	; 1
 69a:	08 95       	ret
 69c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_zero>
 6a0:	67 2f       	mov	r22, r23
 6a2:	78 2f       	mov	r23, r24
 6a4:	88 27       	eor	r24, r24
 6a6:	b8 5f       	subi	r27, 0xF8	; 248
 6a8:	39 f0       	breq	.+14     	; 0x6b8 <__fixunssfsi+0x4c>
 6aa:	b9 3f       	cpi	r27, 0xF9	; 249
 6ac:	cc f3       	brlt	.-14     	; 0x6a0 <__fixunssfsi+0x34>
 6ae:	86 95       	lsr	r24
 6b0:	77 95       	ror	r23
 6b2:	67 95       	ror	r22
 6b4:	b3 95       	inc	r27
 6b6:	d9 f7       	brne	.-10     	; 0x6ae <__fixunssfsi+0x42>
 6b8:	3e f4       	brtc	.+14     	; 0x6c8 <__fixunssfsi+0x5c>
 6ba:	90 95       	com	r25
 6bc:	80 95       	com	r24
 6be:	70 95       	com	r23
 6c0:	61 95       	neg	r22
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	08 95       	ret

000006ca <__fp_inf>:
 6ca:	97 f9       	bld	r25, 7
 6cc:	9f 67       	ori	r25, 0x7F	; 127
 6ce:	80 e8       	ldi	r24, 0x80	; 128
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	08 95       	ret

000006d6 <__fp_nan>:
 6d6:	9f ef       	ldi	r25, 0xFF	; 255
 6d8:	80 ec       	ldi	r24, 0xC0	; 192
 6da:	08 95       	ret

000006dc <__fp_pscA>:
 6dc:	00 24       	eor	r0, r0
 6de:	0a 94       	dec	r0
 6e0:	16 16       	cp	r1, r22
 6e2:	17 06       	cpc	r1, r23
 6e4:	18 06       	cpc	r1, r24
 6e6:	09 06       	cpc	r0, r25
 6e8:	08 95       	ret

000006ea <__fp_pscB>:
 6ea:	00 24       	eor	r0, r0
 6ec:	0a 94       	dec	r0
 6ee:	12 16       	cp	r1, r18
 6f0:	13 06       	cpc	r1, r19
 6f2:	14 06       	cpc	r1, r20
 6f4:	05 06       	cpc	r0, r21
 6f6:	08 95       	ret

000006f8 <__fp_round>:
 6f8:	09 2e       	mov	r0, r25
 6fa:	03 94       	inc	r0
 6fc:	00 0c       	add	r0, r0
 6fe:	11 f4       	brne	.+4      	; 0x704 <__fp_round+0xc>
 700:	88 23       	and	r24, r24
 702:	52 f0       	brmi	.+20     	; 0x718 <__fp_round+0x20>
 704:	bb 0f       	add	r27, r27
 706:	40 f4       	brcc	.+16     	; 0x718 <__fp_round+0x20>
 708:	bf 2b       	or	r27, r31
 70a:	11 f4       	brne	.+4      	; 0x710 <__fp_round+0x18>
 70c:	60 ff       	sbrs	r22, 0
 70e:	04 c0       	rjmp	.+8      	; 0x718 <__fp_round+0x20>
 710:	6f 5f       	subi	r22, 0xFF	; 255
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	08 95       	ret

0000071a <__fp_split3>:
 71a:	57 fd       	sbrc	r21, 7
 71c:	90 58       	subi	r25, 0x80	; 128
 71e:	44 0f       	add	r20, r20
 720:	55 1f       	adc	r21, r21
 722:	59 f0       	breq	.+22     	; 0x73a <__fp_splitA+0x10>
 724:	5f 3f       	cpi	r21, 0xFF	; 255
 726:	71 f0       	breq	.+28     	; 0x744 <__fp_splitA+0x1a>
 728:	47 95       	ror	r20

0000072a <__fp_splitA>:
 72a:	88 0f       	add	r24, r24
 72c:	97 fb       	bst	r25, 7
 72e:	99 1f       	adc	r25, r25
 730:	61 f0       	breq	.+24     	; 0x74a <__fp_splitA+0x20>
 732:	9f 3f       	cpi	r25, 0xFF	; 255
 734:	79 f0       	breq	.+30     	; 0x754 <__fp_splitA+0x2a>
 736:	87 95       	ror	r24
 738:	08 95       	ret
 73a:	12 16       	cp	r1, r18
 73c:	13 06       	cpc	r1, r19
 73e:	14 06       	cpc	r1, r20
 740:	55 1f       	adc	r21, r21
 742:	f2 cf       	rjmp	.-28     	; 0x728 <__fp_split3+0xe>
 744:	46 95       	lsr	r20
 746:	f1 df       	rcall	.-30     	; 0x72a <__fp_splitA>
 748:	08 c0       	rjmp	.+16     	; 0x75a <__fp_splitA+0x30>
 74a:	16 16       	cp	r1, r22
 74c:	17 06       	cpc	r1, r23
 74e:	18 06       	cpc	r1, r24
 750:	99 1f       	adc	r25, r25
 752:	f1 cf       	rjmp	.-30     	; 0x736 <__fp_splitA+0xc>
 754:	86 95       	lsr	r24
 756:	71 05       	cpc	r23, r1
 758:	61 05       	cpc	r22, r1
 75a:	08 94       	sec
 75c:	08 95       	ret

0000075e <__fp_zero>:
 75e:	e8 94       	clt

00000760 <__fp_szero>:
 760:	bb 27       	eor	r27, r27
 762:	66 27       	eor	r22, r22
 764:	77 27       	eor	r23, r23
 766:	cb 01       	movw	r24, r22
 768:	97 f9       	bld	r25, 7
 76a:	08 95       	ret

0000076c <__mulsf3>:
 76c:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3x>
 770:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__fp_round>
 774:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_pscA>
 778:	38 f0       	brcs	.+14     	; 0x788 <__mulsf3+0x1c>
 77a:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_pscB>
 77e:	20 f0       	brcs	.+8      	; 0x788 <__mulsf3+0x1c>
 780:	95 23       	and	r25, r21
 782:	11 f0       	breq	.+4      	; 0x788 <__mulsf3+0x1c>
 784:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_inf>
 788:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__fp_nan>
 78c:	11 24       	eor	r1, r1
 78e:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_szero>

00000792 <__mulsf3x>:
 792:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_split3>
 796:	70 f3       	brcs	.-36     	; 0x774 <__mulsf3+0x8>

00000798 <__mulsf3_pse>:
 798:	95 9f       	mul	r25, r21
 79a:	c1 f3       	breq	.-16     	; 0x78c <__mulsf3+0x20>
 79c:	95 0f       	add	r25, r21
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	55 1f       	adc	r21, r21
 7a2:	62 9f       	mul	r22, r18
 7a4:	f0 01       	movw	r30, r0
 7a6:	72 9f       	mul	r23, r18
 7a8:	bb 27       	eor	r27, r27
 7aa:	f0 0d       	add	r31, r0
 7ac:	b1 1d       	adc	r27, r1
 7ae:	63 9f       	mul	r22, r19
 7b0:	aa 27       	eor	r26, r26
 7b2:	f0 0d       	add	r31, r0
 7b4:	b1 1d       	adc	r27, r1
 7b6:	aa 1f       	adc	r26, r26
 7b8:	64 9f       	mul	r22, r20
 7ba:	66 27       	eor	r22, r22
 7bc:	b0 0d       	add	r27, r0
 7be:	a1 1d       	adc	r26, r1
 7c0:	66 1f       	adc	r22, r22
 7c2:	82 9f       	mul	r24, r18
 7c4:	22 27       	eor	r18, r18
 7c6:	b0 0d       	add	r27, r0
 7c8:	a1 1d       	adc	r26, r1
 7ca:	62 1f       	adc	r22, r18
 7cc:	73 9f       	mul	r23, r19
 7ce:	b0 0d       	add	r27, r0
 7d0:	a1 1d       	adc	r26, r1
 7d2:	62 1f       	adc	r22, r18
 7d4:	83 9f       	mul	r24, r19
 7d6:	a0 0d       	add	r26, r0
 7d8:	61 1d       	adc	r22, r1
 7da:	22 1f       	adc	r18, r18
 7dc:	74 9f       	mul	r23, r20
 7de:	33 27       	eor	r19, r19
 7e0:	a0 0d       	add	r26, r0
 7e2:	61 1d       	adc	r22, r1
 7e4:	23 1f       	adc	r18, r19
 7e6:	84 9f       	mul	r24, r20
 7e8:	60 0d       	add	r22, r0
 7ea:	21 1d       	adc	r18, r1
 7ec:	82 2f       	mov	r24, r18
 7ee:	76 2f       	mov	r23, r22
 7f0:	6a 2f       	mov	r22, r26
 7f2:	11 24       	eor	r1, r1
 7f4:	9f 57       	subi	r25, 0x7F	; 127
 7f6:	50 40       	sbci	r21, 0x00	; 0
 7f8:	9a f0       	brmi	.+38     	; 0x820 <__mulsf3_pse+0x88>
 7fa:	f1 f0       	breq	.+60     	; 0x838 <__mulsf3_pse+0xa0>
 7fc:	88 23       	and	r24, r24
 7fe:	4a f0       	brmi	.+18     	; 0x812 <__mulsf3_pse+0x7a>
 800:	ee 0f       	add	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	bb 1f       	adc	r27, r27
 806:	66 1f       	adc	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	91 50       	subi	r25, 0x01	; 1
 80e:	50 40       	sbci	r21, 0x00	; 0
 810:	a9 f7       	brne	.-22     	; 0x7fc <__mulsf3_pse+0x64>
 812:	9e 3f       	cpi	r25, 0xFE	; 254
 814:	51 05       	cpc	r21, r1
 816:	80 f0       	brcs	.+32     	; 0x838 <__mulsf3_pse+0xa0>
 818:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_inf>
 81c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_szero>
 820:	5f 3f       	cpi	r21, 0xFF	; 255
 822:	e4 f3       	brlt	.-8      	; 0x81c <__mulsf3_pse+0x84>
 824:	98 3e       	cpi	r25, 0xE8	; 232
 826:	d4 f3       	brlt	.-12     	; 0x81c <__mulsf3_pse+0x84>
 828:	86 95       	lsr	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f7 95       	ror	r31
 832:	e7 95       	ror	r30
 834:	9f 5f       	subi	r25, 0xFF	; 255
 836:	c1 f7       	brne	.-16     	; 0x828 <__mulsf3_pse+0x90>
 838:	fe 2b       	or	r31, r30
 83a:	88 0f       	add	r24, r24
 83c:	91 1d       	adc	r25, r1
 83e:	96 95       	lsr	r25
 840:	87 95       	ror	r24
 842:	97 f9       	bld	r25, 7
 844:	08 95       	ret

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
